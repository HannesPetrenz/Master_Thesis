

import numpy as np
from numpy import linalg as la

import os
import pathlib
import sqlite3
from typing import List

import warnings
import pdb

def get_track():
    npzfile = np.load(pathlib.Path('L_track_barc.npz'), allow_pickle = True)
    track = RadiusArclengthTrack()
    track.initialize(npzfile['track_width'], npzfile['slack'], npzfile['cl_segs'])
    return track   


class RadiusArclengthTrack():
    def __init__(self, track_width=None, slack=None, cl_segs=None):
        self.track_width = track_width
        self.slack = slack
        self.cl_segs = cl_segs

        self.n_segs = None

        self.key_pts = None
        self.track_length = None

        self.track_extents = None

        self.phase_out = False
        self.circuit = True # Flag for whether the track is a circuit

    def initialize(self, track_width=None, slack=None, cl_segs=None, init_pos=(0, 0, 0)):
        if track_width is not None:
            self.track_width = track_width
        if slack is not None:
            self.slack = slack
        if cl_segs is not None:
            self.cl_segs = cl_segs

        self.half_width = self.track_width / 2
        self.n_segs = self.cl_segs.shape[0]
        self.key_pts = self.get_track_key_pts(self.cl_segs, init_pos)
        self.track_length = self.key_pts[-1, 3]

        seg_x = self.key_pts[:, 0]
        seg_y = self.key_pts[:, 1]
        seg_t = self.key_pts[:, 2]
        cum_l = self.key_pts[:, 3]
        seg_l = self.key_pts[:, 4]
        seg_c = self.key_pts[:, 5]

        
        # Cumulative track heading
        cum_t = [seg_t[0]]
        for i in range(self.key_pts.shape[0]-1):
            cum_t.append(cum_t[-1] + seg_l[i+1]*seg_c[i+1])
        cum_t = np.array(cum_t)


        # Cumulative change in track heading
        cum_dt = cum_t - cum_t[0]
        
        # Get the x-y extents of the track
        s_grid = np.linspace(0, self.track_length, int(10 * self.track_length))
        x_grid, y_grid = [], []
        for s in s_grid:
            xp, yp, _ = self.local_to_global((s, self.half_width + self.slack, 0))
            xm, ym, _ = self.local_to_global((s, -self.half_width - self.slack, 0))
            x_grid.append(xp)
            x_grid.append(xm)
            y_grid.append(yp)
            y_grid.append(ym)
        self.track_extents = dict(x_min=np.amin(x_grid), x_max=np.amax(x_grid), y_min=np.amin(y_grid),
                                  y_max=np.amax(y_grid))

        return
    def get_halfwidth(self, s):
        return self.half_width

    def get_track_key_pts(self, cl_segs, init_pos):
        if cl_segs is None:
            raise ValueError('Track segments have not been defined')

        n_segs = cl_segs.shape[0]
        # Given the segments in cl_segs we compute the (x, y) points of the track and the angle of the tangent vector (psi) at
        # these points. For each segment we compute the (x, y, psi) coordinate at the last point of the segment. Furthermore,
        # we compute also the cumulative length at the starting point of the segment at signed curvature
        # key_pts = [x, y, psi, cumulative length, segment length, signed curvature]
        track_key_pts = np.zeros((n_segs + 1, 6))
        track_key_pts[0, 0] = init_pos[0]
        track_key_pts[0, 1] = init_pos[1]
        track_key_pts[0, 2] = init_pos[2]
        for i in range(1, n_segs + 1):
            x_prev = track_key_pts[i - 1, 0]
            y_prev = track_key_pts[i - 1, 1]
            psi_prev = track_key_pts[i - 1, 2]
            cum_s_prev = track_key_pts[i - 1, 3]

            l = cl_segs[i - 1, 0]
            r = cl_segs[i - 1, 1]

            if r == 0:
                # No curvature (i.e. straight line)
                psi = psi_prev
                x = x_prev + l * np.cos(psi_prev)
                y = y_prev + l * np.sin(psi_prev)
                curvature = 0
            else:
                # dir = np.sign(r)

                # Find coordinates for center of curved segment
                x_c = x_prev - r * (np.sin(psi_prev))
                y_c = y_prev + r * (np.cos(psi_prev))
                # Angle spanned by curved segment
                theta = l / r
                # end of curve
                x = x_c + r * np.sin(psi_prev + theta)
                y = y_c - r * np.cos(psi_prev + theta)
                # curvature of segment
                curvature = 1 / r

                # next angle
                psi = wrap_angle(psi_prev + theta)
            cum_s = cum_s_prev + l
            track_key_pts[i] = np.array([x, y, psi, cum_s, l, curvature])

        return track_key_pts
    
    def local_to_global(self, cl_coord):
        if self.key_pts is None:
            raise ValueError('Track key points have not been defined')

        # s = np.mod(cl_coord[0], self.track_length) # Distance along current lap
        s = cl_coord[0]
        while s < 0: s += self.track_length
        while s >= self.track_length: s -= self.track_length

        e_y = cl_coord[1]
        e_psi = cl_coord[2]

        # Find key point indicies corresponding to current segment
        # key_pts = [x, y, psi, cumulative length, segment length, signed curvature]
        key_pt_idx_s = np.where(s >= self.key_pts[:, 3])[0][-1]
        key_pt_idx_f = key_pt_idx_s + 1
        seg_idx = key_pt_idx_s

        x_s = self.key_pts[key_pt_idx_s, 0]
        y_s = self.key_pts[key_pt_idx_s, 1]
        psi_s = self.key_pts[key_pt_idx_s, 2]
        curve_s = self.key_pts[key_pt_idx_s, 5]
        x_f = self.key_pts[key_pt_idx_f, 0]
        y_f = self.key_pts[key_pt_idx_f, 1]
        psi_f = self.key_pts[key_pt_idx_f, 2]
        curve_f = self.key_pts[key_pt_idx_f, 5]

        l = self.key_pts[key_pt_idx_f, 4]
        d = s - self.key_pts[key_pt_idx_s, 3]  # Distance along current segment

        if curve_f == 0:
            # Segment is a straight line
            x = x_s + (x_f - x_s) * d / l + e_y * np.cos(psi_f + np.pi / 2)
            y = y_s + (y_f - y_s) * d / l + e_y * np.sin(psi_f + np.pi / 2)
            psi = wrap_angle(psi_f + e_psi)
        else:
            r = 1 / curve_f
            dir = sign(r)

            # Find coordinates for center of curved segment
            x_c = x_s + np.abs(r) * np.cos(psi_s + dir * np.pi / 2)
            y_c = y_s + np.abs(r) * np.sin(psi_s + dir * np.pi / 2)

            # Angle spanned up to current location along segment
            span_ang = d / np.abs(r)

            # Angle of the tangent vector at the current location
            psi_d = wrap_angle(psi_s + dir * span_ang)

            ang_norm = wrap_angle(psi_s + dir * np.pi / 2)
            ang = -sign(ang_norm) * (np.pi - np.abs(ang_norm))

            x = x_c + (np.abs(r) - dir * e_y) * np.cos(ang + dir * span_ang)
            y = y_c + (np.abs(r) - dir * e_y) * np.sin(ang + dir * span_ang)
            psi = wrap_angle(psi_d + e_psi)
        return (x, y, psi)

    def get_track_xy(self, pts_per_dist=None, close_loop=True):
        if self.key_pts is None:
            raise ValueError('Track key points have not been defined')

        if pts_per_dist is None:
            pts_per_dist = 2000 / self.track_length
        
        # Start line
        init_x = self.key_pts[0, 0]
        init_y = self.key_pts[0, 1]
        init_psi = self.key_pts[0, 2]
        start_line_x = [init_x + np.cos(init_psi + np.pi / 2) * self.track_width / 2,
                        init_x - np.cos(init_psi + np.pi / 2) * self.track_width / 2]
        start_line_y = [init_y + np.sin(init_psi + np.pi / 2) * self.track_width / 2,
                        init_y - np.sin(init_psi + np.pi / 2) * self.track_width / 2]

        # Center line and boundaries
        x_track = []
        x_bound_in = []
        x_bound_out = []
        y_track = []
        y_bound_in = []
        y_bound_out = []
        for i in range(1, self.key_pts.shape[0]):
            l = self.key_pts[i, 4]
            cum_s = self.key_pts[i - 1, 3]
            n_pts = np.around(l * pts_per_dist)
            d = np.linspace(0, l, int(n_pts))
            for j in d:
                cl_coord = (j + cum_s, 0, 0)
                xy_coord = self.local_to_global(cl_coord)
                x_track.append(xy_coord[0])
                y_track.append(xy_coord[1])
                cl_coord = (j + cum_s, self.track_width / 2, 0)
                xy_coord = self.local_to_global(cl_coord)
                x_bound_in.append(xy_coord[0])
                y_bound_in.append(xy_coord[1])
                cl_coord = (j + cum_s, -self.track_width / 2, 0)
                xy_coord = self.local_to_global(cl_coord)
                x_bound_out.append(xy_coord[0])
                y_bound_out.append(xy_coord[1])
        if not close_loop:
            x_track = x_track[:-1]
            y_track = y_track[:-1]
            x_bound_in = x_bound_in[:-1]
            y_bound_in = y_bound_in[:-1]
            x_bound_out = x_bound_out[:-1]
            y_bound_out = y_bound_out[:-1]

        D = dict(start=dict(x=start_line_x, y=start_line_y), 
                 center=dict(x=x_track, y=y_track),
                 bound_in=dict(x=x_bound_in, y=y_bound_in),
                 bound_out=dict(x=x_bound_out, y=y_bound_out))
        
        return D
def wrap_angle(theta):
    if theta < -np.pi:
        wrapped_angle = 2 * np.pi + theta
    elif theta > np.pi:
        wrapped_angle = theta - 2 * np.pi
    else:
        wrapped_angle = theta

    return wrapped_angle

def sign(a):
    if a >= 0:
        res = 1
    else:
        res = -1

    return res


get_track()